version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - my-network

  kafka-broker-1:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-1:9092
      - KAFKA_MESSAGE_MAX_BYTES=500000000
      - KAFKA_REPLICA_FETCH_MAX_BYTES=500000000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: always
    networks:
      - my-network

  kafka-broker-2:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-2:9093
      - KAFKA_MESSAGE_MAX_BYTES=500000000
      - KAFKA_REPLICA_FETCH_MAX_BYTES=500000000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    restart: always
    networks:
      - my-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - my-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - my-network

  grpc-server:
    build:
      context: ./grpc-server
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - elasticsearch
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker-1:9092,kafka-broker-2:9093
    networks:
      - my-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.client
    depends_on:
      - grpc-server
    networks:
      - my-network
  
  order-processing:
    build:
      context: ./order-processing
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
    environment:
      - KAFKA_BROKER_1=kafka-broker-1:9092
      - KAFKA_BROKER_2=kafka-broker-2:9093
    networks:
      - my-network
  
  notification-service:
    build:
      context: ./notification-service
    ports:
      - "3000:3000"
    networks:
      - my-network
  
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - my-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000" # Puerto local 3001 apunta al puerto 3000 de Grafana
    depends_on:
      - prometheus
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
